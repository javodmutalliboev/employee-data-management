import sysfrom PyQt5.QtWidgets import (QApplication,                             QWidget,                             QVBoxLayout,                             QLineEdit,                             QPushButton,                             QTableWidget,                             QTableWidgetItem,                             QMessageBox,                             QDoubleSpinBox,                             QSpinBox,                             QHBoxLayout,                             QLabel)import mysql.connectorconn = mysql.connector.connect(    host="localhost",    user="javod",    password="hHh(26Y2%C~w",    database="employee_data_management")cursor = conn.cursor()class EmployeeDataManagement(QWidget):    name: QLineEdit    age: QSpinBox    salary: QDoubleSpinBox    table: QTableWidget    search_input: QLineEdit    def __init__(self):        super().__init__()        self.init_ui()    def init_ui(self):        self.setWindowTitle("Employee Data Management")        # VLayout        v_layout = QVBoxLayout()        # employee name, age, salary        self.name = QLineEdit()        self.name.setPlaceholderText("Enter name")        v_layout.addWidget(self.name)        salary_h_layout = QHBoxLayout()        salary_label = QLabel("Salary:")        self.salary = QDoubleSpinBox()  #        self.salary.setRange(0.00, 99999999.99)  #        self.salary.setDecimals(2)  #        self.salary.setSingleStep(0.1)        salary_h_layout.addWidget(salary_label)        salary_h_layout.addWidget(self.salary)        v_layout.addLayout(salary_h_layout)        age_h_layout = QHBoxLayout()        age_label = QLabel("Age:")        self.age = QSpinBox()        self.age.setRange(1, 1000000)        self.age.setSingleStep(1)        age_h_layout.addWidget(age_label)        age_h_layout.addWidget(self.age)        v_layout.addLayout(age_h_layout)        # product qo'shish button-i        add_button = QPushButton("Add Employee", self)        add_button.clicked.connect(self.add_employee_data)        v_layout.addWidget(add_button)        # product-ni update qilish button-i        update_button = QPushButton("Update Selected Employee", self)        update_button.clicked.connect(self.update_employee_data)        v_layout.addWidget(update_button)        # product-ni delete qilish button-i        delete_button = QPushButton("Delete Selected Employee", self)        delete_button.clicked.connect(self.delete_employee_data)        v_layout.addWidget(delete_button)        # search by name        search_h_layout = QHBoxLayout()        self.search_input = QLineEdit()        self.search_input.setPlaceholderText("Search by name")        search_button = QPushButton("Search", self)        search_button.clicked.connect(self.search_employee)        search_h_layout.addWidget(self.search_input)        search_h_layout.addWidget(search_button)        reset_button = QPushButton("Reset", self)        reset_button.clicked.connect(self.reset_table)        search_h_layout.addWidget(reset_button)        v_layout.addLayout(search_h_layout)        # DISTINCT aged employees        h_layout = QHBoxLayout()        distinct_button = QPushButton("Distinct aged employees", self)        distinct_button.clicked.connect(self.load_distinct_aged_employees)        h_layout.addWidget(distinct_button)        salaries_sum_button = QPushButton("Sum of salaries", self)        salaries_sum_button.clicked.connect(self.show_salaries_sum)        h_layout.addWidget(salaries_sum_button)        ne_button = QPushButton("Number of employees", self)        ne_button.clicked.connect(self.load_ne)        h_layout.addWidget(ne_button)        v_layout.addLayout(h_layout)        h_2_layout = QHBoxLayout()        asc_order_by_age_button = QPushButton("ORDER BY age ASC", self)        asc_order_by_age_button.clicked.connect(self.asc_order_by_age)        desc_order_by_age_button = QPushButton("ORDER BY age DESC", self)        desc_order_by_age_button.clicked.connect(self.desc_order_by_age)        h_2_layout.addWidget(asc_order_by_age_button)        h_2_layout.addWidget(desc_order_by_age_button)        v_layout.addLayout(h_2_layout)        h_3_layout = QHBoxLayout()        max_salary_button = QPushButton("MAX salary", self)        max_salary_button.clicked.connect(self.max_salary)        min_salary_button = QPushButton("MIN salary", self)        min_salary_button.clicked.connect(self.min_salary)        h_3_layout.addWidget(max_salary_button)        h_3_layout.addWidget(min_salary_button)        v_layout.addLayout(h_3_layout)        # product-larni display qilish uchun table        self.table = QTableWidget(self)        self.table.setColumnCount(4)        self.table.setHorizontalHeaderLabels(["ID", "Name", "Age", "Salary"])        self.table.cellClicked.connect(self.select_employee_data)        v_layout.addWidget(self.table)        # app start qilganda product-larni load qilish        self.load_employees()        self.setLayout(v_layout)    def max_salary(self):        cursor.execute("SELECT MAX(salary) FROM employee_data")        result = cursor.fetchone()        max_salary = result[0] if result[0] is not None else 0        QMessageBox.information(self, "MAX salary",                                f"MAX salary is {max_salary}.")    def min_salary(self):        cursor.execute("SELECT MIN(salary) FROM employee_data")        result = cursor.fetchone()        min_salary = result[0] if result[0] is not None else 0        QMessageBox.information(self, "MIN salary",                                f"MIN salary is {min_salary}.")    def desc_order_by_age(self):        self.table.setRowCount(0)  # birinchi        # navbatda table-ni clear qilish        cursor.execute("SELECT id, name, age, salary FROM employee_data ORDER BY age DESC")        for row_idx, (employee_id, name, age, salary) in enumerate(cursor.fetchall()):            self.table.insertRow(row_idx)            self.table.setItem(row_idx, 0, QTableWidgetItem(str(employee_id)))            self.table.setItem(row_idx, 1, QTableWidgetItem(str(name)))            self.table.setItem(row_idx, 2, QTableWidgetItem(str(age)))            self.table.setItem(row_idx, 3, QTableWidgetItem(str(salary)))    def asc_order_by_age(self):        self.table.setRowCount(0)  # birinchi        # navbatda table-ni clear qilish        cursor.execute("SELECT id, name, age, salary FROM employee_data ORDER BY age ASC")        for row_idx, (employee_id, name, age, salary) in enumerate(cursor.fetchall()):            self.table.insertRow(row_idx)            self.table.setItem(row_idx, 0, QTableWidgetItem(str(employee_id)))            self.table.setItem(row_idx, 1, QTableWidgetItem(str(name)))            self.table.setItem(row_idx, 2, QTableWidgetItem(str(age)))            self.table.setItem(row_idx, 3, QTableWidgetItem(str(salary)))    def load_ne(self):        cursor.execute("SELECT COUNT(*) FROM employee_data")        result = cursor.fetchone()        count = result[0] if result[0] is not None else 0        QMessageBox.information(self, "Number of employees",                                f"The total number of employees is {count}.")    def show_salaries_sum(self):        cursor.execute("SELECT SUM(salary) FROM employee_data")        result = cursor.fetchone()        sum = result[0] if result[0] is not None else 0        QMessageBox.information(self, "Sum of salaries",                                f"The total sum of salaries is {sum}.")    def load_distinct_aged_employees(self):        self.table.setRowCount(0)        cursor.execute("SELECT DISTINCT age FROM employee_data")        for row_idx, age in enumerate(cursor.fetchall()):            self.table.insertRow(row_idx)            self.table.setItem(row_idx, 2, QTableWidgetItem(str(age[0])))    def reset_table(self):        self.search_input.clear()        self.load_employees()    def search_employee(self):        search_name = self.search_input.text()        if search_name:            query = ("SELECT id, name, age, salary FROM employee_data WHERE name LIKE %s")            cursor.execute(query, ('%' + search_name + '%',))            self.table.setRowCount(0)            for row_idx, (employee_id, name, age, salary) in enumerate(cursor.fetchall()):                self.table.insertRow(row_idx)                self.table.setItem(row_idx, 0,                                   QTableWidgetItem(str(employee_id)))                self.table.setItem(row_idx, 1,                                   QTableWidgetItem(str(name)))                self.table.setItem(row_idx, 2,                                   QTableWidgetItem(str(age)))                self.table.setItem(row_idx, 3,                                   QTableWidgetItem(str(salary)))        else:            self.load_employees()    def load_employees(self):        self.table.setRowCount(0)  # birinchi        # navbatda table-ni clear qilish        cursor.execute("SELECT id, name, age, salary FROM employee_data")        for row_idx, (employee_id, name, age, salary) in enumerate(cursor.fetchall()):            self.table.insertRow(row_idx)            self.table.setItem(row_idx, 0, QTableWidgetItem(str(employee_id)))            self.table.setItem(row_idx, 1, QTableWidgetItem(str(name)))            self.table.setItem(row_idx, 2, QTableWidgetItem(str(age)))            self.table.setItem(row_idx, 3, QTableWidgetItem(str(salary)))    def select_employee_data(self, row, column):        try:            employee_id = int(self.table.item(row, 0).text())            cursor.execute("SELECT LENGTH(name) FROM employee_data WHERE id=%s", (employee_id,))            result = cursor.fetchone()            length = result[0] if result[0] is not None else 0            name = self.table.item(row, 1).text()            QMessageBox.information(self,                                    f"Length",                                    f"Length of {name} is {length}.")            age = self.table.item(row, 2).text()            salary = self.table.item(row, 3).text()            self.name.setText(name)            self.age.setValue(int(age))            self.salary.setValue(float(salary))        except Exception as exp:            print(exp)    def delete_employee_data(self):        selected_row = self.table.currentRow()        if selected_row != -1:            employee_id = self.table.item(selected_row, 0).text()            cursor.execute("DELETE FROM employee_data WHERE id=%s", (employee_id,))            conn.commit()            self.load_employees()            self.name.clear()            self.age.clear()            self.salary.clear()    def update_employee_data(self):        selected_row = self.table.currentRow()        if selected_row != -1:            employee_id = self.table.item(selected_row, 0).text()            new_name = self.name.text()            new_age = int(self.age.text())            new_salary = float(self.salary.text().replace(',', '.'))  # self.price.text()            if new_name and new_age and new_salary:                cursor.execute("UPDATE employee_data SET name=%s, age=%s, salary=%s WHERE id=%s",                               (new_name, new_age, new_salary, employee_id))                conn.commit()                self.load_employees()                self.name.clear()                self.age.clear()                self.salary.clear()            else:                QMessageBox.warning(self, "Input Error",                                    "Uchov input field-larni to'ldirish kerak")    def add_employee_data(self):        name = self.name.text()        # price = float(self.price.text())        age = int(self.age.text())        salary = float(self.salary.text().replace(',', '.'))        if name and age and salary:            cursor.execute("INSERT INTO employee_data (name, age, salary) VALUES (%s, %s, %s)",                           (name, age, salary))            try:                conn.commit()                self.load_employees()                self.name.clear()                self.age.clear()                self.salary.clear()            except Exception as istisno:                print(istisno)        else:            QMessageBox.warning(self, "Input Error",                                "Uchov input field-larni to'ldirish kerak")def main():    print(sys.argv)    app = QApplication(sys.argv)    window = EmployeeDataManagement()    window.show()    sys.exit(app.exec_())if __name__ == "__main__":    main()